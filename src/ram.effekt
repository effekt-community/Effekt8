module src/ram

import bytearray

interface Ram {
  def getAddr(address: Int): Byte
  def setAddr(address: Int, byte: Byte): Unit
  def init(rom: ByteArray): Unit
}

def get(ram: Ref[ByteArray], address: Int): Byte = ram.get.unsafeGet(address)
def set(ram: Ref[ByteArray], address: Int, byte: Byte): Unit = ram.get.unsafeSet(address, byte)
def set(ram: Ref[ByteArray], address: Int, value: Int): Unit = ram.get.unsafeSet(address, value.toByte)

// Load the predefined fontset. There is no better way to do this, since they are hardcoded values.
def loadFont(ram: Ref[ByteArray]): Unit = {
  // Since there is no way to represent hex literals in Effekt, we have to use decimal literals and convert them to bytes.
  val fontSet: List[Byte] = [
    240.toByte, 144.toByte, 144.toByte, 144.toByte, 240.toByte, // 0
    32.toByte,  96.toByte,  32.toByte,  32.toByte,  112.toByte, // 1
    240.toByte, 16.toByte,  240.toByte, 128.toByte, 240.toByte, // 2
    240.toByte, 16.toByte,  240.toByte, 16.toByte,  240.toByte, // 3
    144.toByte, 144.toByte, 240.toByte, 16.toByte,  16.toByte,  // 4
    240.toByte, 128.toByte, 240.toByte, 16.toByte,  240.toByte, // 5
    240.toByte, 128.toByte, 240.toByte, 144.toByte, 240.toByte, // 6
    240.toByte, 16.toByte,  32.toByte,  64.toByte,  64.toByte,  // 7
    240.toByte, 144.toByte, 240.toByte, 144.toByte, 240.toByte, // 8
    240.toByte, 144.toByte, 240.toByte, 16.toByte,  240.toByte, // 9
    240.toByte, 144.toByte, 240.toByte, 144.toByte, 144.toByte, // A
    224.toByte, 144.toByte, 224.toByte, 144.toByte, 224.toByte, // B
    240.toByte, 128.toByte, 128.toByte, 128.toByte, 240.toByte, // C
    224.toByte, 144.toByte, 144.toByte, 144.toByte, 224.toByte, // D
    240.toByte, 128.toByte, 240.toByte, 128.toByte, 240.toByte, // E
    240.toByte, 128.toByte, 240.toByte, 128.toByte, 128.toByte  // F
  ]
  fontSet.foreachIndex { (i, byte) =>
    ram.set(i, byte)
  }
}

// Load the ROM into memory starting at 0x200 (512)
def loadRom(ram: Ref[ByteArray], rom: ByteArray): Unit = rom.foreachIndex { (i, byte) =>
  set(ram, 512 + i, byte)
}

def freshRam { prog: => Unit / Ram }: Unit = {
  val ram: Ref[ByteArray] = ref(allocate(4096)) // 4KB of memory

  try prog() with Ram {
    def getAddr(address: Int) = resume(get(ram, address))
    def setAddr(address: Int, byte: Byte) = { set(ram, address, byte); resume(()) }
    def init(rom: ByteArray) = {
      loadFont(ram)
      loadRom(ram, rom)
      resume(())
    }
  }
}